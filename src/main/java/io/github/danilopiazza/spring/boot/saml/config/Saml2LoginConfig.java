package io.github.danilopiazza.spring.boot.saml.config;

import static org.springframework.security.config.Customizer.withDefaults;

import java.io.IOException;
import java.io.InputStream;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPrivateKey;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.converter.RsaKeyConverters;
import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;

@Configuration
public class Saml2LoginConfig {
    @EnableWebSecurity
    public static class Saml2LoginSecurityConfig extends WebSecurityConfigurerAdapter {
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests(authorize -> authorize.anyRequest().authenticated()).saml2Login(withDefaults());
        }
    }

    @Bean
    public RelyingPartyRegistrationRepository relyingPartyRegistrationRepository() {
        return new InMemoryRelyingPartyRegistrationRepository(relyingPartiRegistration());
    }

    private RelyingPartyRegistration relyingPartiRegistration() {
        // remote IDP entity ID
        String idpEntityId = "http://localhost:10080/simplesaml/saml2/idp/metadata.php";
        // remote WebSSO Endpoint - Where to Send AuthNRequests to
        String webSsoEndpoint = "http://localhost:10080/simplesaml/saml2/idp/SSOService.php";
        // local registration ID
        String registrationId = "spring-boot-saml-poc";
        // local entity ID - autogenerated based on URL
        String localEntityIdTemplate = "issuer.example.com";
        // local SSO URL - autogenerated, endpoint to receive SAML Response objects
        String acsUrlTemplate = "{baseUrl}/login/saml2/sso/{registrationId}";
        // local signing (and local decryption key and remote encryption certificate)
        Saml2X509Credential signingCredential = signingCredential("/certs/rp-private.key", "/certs/rp-certificate.pem");
        // IDP certificate for verification of incoming messages
        Saml2X509Credential idpVerificationCertificate = verificationCertificate("/certs/idp-certificate.pem");
        return RelyingPartyRegistration.withRegistrationId(registrationId)
                .providerDetails(config -> config.entityId(idpEntityId))
                .providerDetails(config -> config.webSsoUrl(webSsoEndpoint)).credentials(c -> c.add(signingCredential))
                .credentials(c -> c.add(idpVerificationCertificate)).localEntityIdTemplate(localEntityIdTemplate)
                .assertionConsumerServiceUrlTemplate(acsUrlTemplate).build();
    }

    private Saml2X509Credential signingCredential(String privateKeyLocation, String certificateLocation) {
        return new Saml2X509Credential(privateKey(privateKeyLocation), certificate(certificateLocation),
                Saml2X509CredentialType.SIGNING, Saml2X509CredentialType.DECRYPTION);
    }

    private Saml2X509Credential verificationCertificate(String certificateLocation) {
        return new Saml2X509Credential(certificate(certificateLocation), Saml2X509CredentialType.VERIFICATION);
    }

    private RSAPrivateKey privateKey(String location) {
        try (InputStream inputStream = getClass().getResourceAsStream(location)) {
            return RsaKeyConverters.pkcs8().convert(inputStream);
        } catch (IOException e) {
            throw new IllegalArgumentException(e);
        }
    }

    private X509Certificate certificate(String location) {
        try (InputStream inputStream = getClass().getResourceAsStream(location)) {
            CertificateFactory factory = CertificateFactory.getInstance("X.509");
            return (X509Certificate) factory.generateCertificate(inputStream);
        } catch (CertificateException | IOException e) {
            throw new IllegalArgumentException(e);
        }
    }
}
